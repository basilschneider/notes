GENERAL
=======

Set up: source script with -c flag
$ . setupEnvironment_inc -c


CREATE N-TUPLES FROM MINIAOD
============================

To make n-tuples:
$ cd "${CMSSW_BASE}"/src/CMGTools/SUSYAnalysis/cfg/
$ heppy test01 run_susySingleLepton_v2_cfg.py -p 0 -N 100 -f

or use the ./run wrapper!

Define in run_susySingleLepton_v2_cfg.py if you want to run over MC
(background), data or signal

Define selectedComponents as the list of groups that you want to run over. The
groups are defined in the imported python file

In the imported python file, use ComponentCreator().makeMCComponent() to
create the samples. If you want to run over the samples that are in e.g. DESY,
you would use ComponentCreator().makeMCComponentFromDESY(), see
CMGTools/Production/python/dataset.py for a definition of these methods

Beware, CMGTools is trying to use cached information. If you change certain
things, you might run into problems. The cache is kept in ~/.cmgdataset.
Delete it to be sure

To make your private n-tuples, change the import satement in
run_susySingleLepton_v2_cfg.py and also the list called selectedComponents. In
you import statement you will import another python file. In this python file,
you use ComponentCreator().makeMCComponent(). The first argument is the name,
the second the path, the third is "CMS" for an official sample, and "LOCAL"
for a local sample. Use makeMCComponentFromLocal() if you have the sample
locally

The heppy options are:
-N: Number of events
-p: Number of events to print at the beginning
-e: Jump to a given event, ignored in multiprocessing
-f: Don't ask if output directory already exists
-i: Stay in interactive mode instead of exiting
-t: Make a time report of each analyzer
-v: Increase verbosity
-q: Do not print log messages
-o: extra options


CREATE FRIEND TREES FROM N-TUPLES
=================================

Go to $CMSSW_BASE/src/CMGTools/SUSYAnalysis/macros and run
$ python prepareEventVariablesFriendTree.py \
    ${inputdir} ${outputdir}
e.g.
$ python prepareEventVariablesFriendTree.py \
    $CMSSW_BASE/src/CMGTools/SUSYAnalysis/cfg/run01 run01

There's a wrapper script to do that:
$ cd ~/analysis/datasets/
$ ./produce_friends -h
will give you an extended help


MAKE CUTFLOW FROM N-TUPLES AND FRIEND TREES
===========================================

To make the cutflows, both n-tuples and friend trees are needed.
$ cd ${CMSSW_BASE}/src/CMGTools/TTHAnalysis/python/plotter/susy-1lep/
$ python ../mcAnalysis.py \
    mca/mca-Spring15_1l_noPU.txt \
    1l_basicCutsFullCutFlow.txt \
    -P /tmp/HT350_1nLep_LT200_hadrFlav \
    --FMC sf/t ~/analysis/datasets/run25_test-full-run/evVarFriend_{cname}.root \
    -l 2.26 \
    -j $(nproc) \
    --s2v \
    --tree treeProducerSusySingleLepton \
    -G

Instead of local path's, you should also be able to use e.g.
-P root://eoscms.cern.ch//eos/cms/store/cmst3/group/susy/...

There is a wrapper script that can be modified and called
$ ./run_cutflow

Note that the options are defined in mcAnalysis.py AND tree2yield.py

The file mca-Spring15_1l_noPU.txt contains the samples and some options for each
sample (like cross sections). Here you can also combine different samples. If
the command above complains about not finding a certain sample, you have to make
modifications in this file.

The cutflow itself is defined in 1l_basicCutsFullCutFlow.txt. The first column
in this file is for the name of the cut and the second is the cut logic. The
cutflow logic can include some trivial logic to make cuts, but for complex cuts,
the quantity to cut on must first be calculated and stored in the friend trees,
then the cut can be applied on this new derived quantity.

More information can be found in the CMG Twiki
http://cern.ch/go/Hr7T
