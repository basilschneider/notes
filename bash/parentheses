#!/usr/bin/env bash

for [, [[ and test, see test

(…) parentheses indicate a subshell. What's inside them isn't an expression like in many other languages, it's a list of commands. These commands are executed in a separate subprocess, so any redirection, assignment, etc. performed inside the parentheses has no effect outside the parentheses.
{ … } braces are like parentheses in that they group commands, but they only influence parsing, not grouping. The program x=2; { x=4; }; echo $x prints 4, whereas x=2; (x=4); echo $x prints 2. (Also braces require spaces around them and a semicolon before closing, whereas parentheses don't. That's just a syntax quirk.)
((…)) double parentheses surround an arithmetic instruction, that is, a computation on integers. This syntax is mostly used for assignments and in conditionals; don't worry about it yet if you're just starting with bash (there are other ways to do the same thing).
[[…]] double brackets surround conditional expressions. Conditional expressions are mostly built on operators such as -n $variable to test if a variable is empty and -e $file to test if a file exists. There are also string equality operators: $string1 = $string2, and the familiar !, && and || operators for negation, conjunction and disjunction as well as parentheses for grouping.
[ … ] single brackets are an alternate form of conditional expressions with more quirks (but older and more portable). Don't write any for now; start worrying about them when you find scripts that contain them.
This is the idiomatic way to write your test in bash:

if [[ $varA = 1 && ($varB = "t1" || $varC = "t2") ]]; then
If you need portability to other shells, this would be the way (note the additional quoting, and the separate sets of brackets around each individual test):

if [ "$varA" = 1 ] && { [ "$varB" = "t1" ] || [ "$varC" = "t2") ]; } then
